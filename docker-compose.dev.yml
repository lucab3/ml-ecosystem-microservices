version: '3.8'

services:
  # PostgreSQL - Base de datos principal
  postgres:
    image: postgres:14-alpine
    container_name: ml-ecosystem-postgres
    environment:
      POSTGRES_DB: ml_ecosystem
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db-schema.sql:/docker-entrypoint-initdb.d/01-init-db-schema.sql
      - ./scripts/init-db-test.sql:/docker-entrypoint-initdb.d/02-init-db-test.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ml_ecosystem"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ml-ecosystem

  # Redis - Cache y Rate Limiting
  redis:
    image: redis:6-alpine
    container_name: ml-ecosystem-redis
    command: redis-server --appendonly yes --requirepass redispass
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - ml-ecosystem

  # Zookeeper para Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: ml-ecosystem-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - ml-ecosystem

  # Kafka - Message Streaming
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ml-ecosystem-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_DELETE_TOPIC_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - ml-ecosystem

  # MongoDB - Catalog Service (opcional)
  mongodb:
    image: mongo:5-focal
    container_name: ml-ecosystem-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: ml_ecosystem
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongodb://admin:password@localhost:27017/ml_ecosystem --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ml-ecosystem

  # Mock MercadoLibre API Server
  mock-ml-api:
    build:
      context: .
      dockerfile: scripts/Dockerfile.mock-ml
    container_name: ml-ecosystem-mock-ml
    ports:
      - "3333:3333"
    environment:
      - NODE_ENV=development
      - PORT=3333
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3333/sites/MLA"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - ml-ecosystem

  # Adminer - Database Admin (opcional)
  adminer:
    image: adminer:latest
    container_name: ml-ecosystem-adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - ml-ecosystem

  # Redis Commander - Redis Admin (opcional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ml-ecosystem-redis-commander
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: "local:redis:6379:0:redispass"
    depends_on:
      - redis
    networks:
      - ml-ecosystem

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local

networks:
  ml-ecosystem:
    driver: bridge